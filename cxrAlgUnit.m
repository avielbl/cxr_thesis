function resultStruct = cxrAlgUnit(files_list, out_folder, fid_log, options)
% cxrAlgUnit is the main function for running chest xray algorithms and generating 
% results struct to be used for the generation of the output xml.
% In addition, this function generates and saves key images from the
% various findings.
% This function is being called by cxrWrapper.
% The function assumes that only one image is processed. If more images
% exists in the input folder as processed by cxrWrapper, the first image
% will be analysed.
% Usage:
%         resultStruct = cxrAlgUnit(files_list, out_folder, fid_log, options)
% Inputs:
%         files_list: struct with detailes regarding the files in the input folder  
%         out_folder: full path for the output folder for the saving of any
%                     key-images generated by the algorithms
%         fid_log: handler to the log file 
%         options: struct with instructions regarding algorithms to be
%                  processed
% Outputs:
%         resultStruct: struct with agregated results from all processed
%                       algorithms


resultStruct = [];
try
    num_files = numel(files_list);
    add_line_to_log(fid_log,'NOTICE',['Start cxrAlgUnit with ' num2str(num_files) ' images.']) % Write to log
    
    %Load and prepare the image in its native size
    I = loadNPrepImg(files_list(1).fullPath);
    [~, info] = evalc('dicominfo(files_list(1).fullPath)');
    % Lung segmentation
    resultStruct.cxrLungSegmentResultStruct = cxrLungSegment(I, fid_log, files_list(1).fullPath);
    if resultStruct.cxrLungSegmentResultStruct.status == 1
        %If lungs segmentation failes, initialize empty results structs
        resultStruct.cxrPtxResultSruct = [];
        resultStruct.cxrAbnormalitiesResultsStruct = [];
    else
       %% Pneumothorax
       if options.runPtx
           resultStruct.cxrPtxResultSruct = cxrPtxAlg(I,  resultStruct.cxrLungSegmentResultStruct, fid_log);
           %Generating and saving key image
           resultStruct.cxrPtxResultSruct.keyImage.ID = info.SOPInstanceUID;
           resultStruct.cxrPtxResultSruct.keyImage.instanceNumber = info.InstanceNumber;
           resultStruct.cxrPtxResultSruct.keyImage.path = fullfile(out_folder, 'pnx_key_image.bmp');
           if resultStruct.cxrPtxResultSruct.status == 0
               generatePtxKeyImage(I, resultStruct.cxrPtxResultSruct, options.ptxKeyImageTypeScores);
           else
              imwrite(I, cxrPtxResultSruct.keyImage.path); 
           end
       end
       
       %% Chest abnormalities (TAU alg)
       if options.runAbnormalities
           resultStruct.cxrAbnormalitiesResultsStruct = cxrAbnormalitiesAlg(I, resultStruct.cxrLungSegmentResultStruct, fid_log);
           resultStruct.cxrAbnormalitiesResultsStruct.keyImage.ID = info.SOPInstanceUID;
           resultStruct.cxrAbnormalitiesResultsStruct.keyImage.instanceNumber = info.InstanceNumber;
           resultStruct.cxrAbnormalitiesResultsStruct.keyImage.path = fullfile(out_folder, 'abnormalities_key_image.bmp');
           keyImage = resizeWAspect(I, 512);
           keyImage = imRescale(keyImage, 0, 255);
           keyImage = uint8(keyImage);
           imwrite(keyImage, resultStruct.cxrAbnormalitiesResultsStruct.keyImage.path);
       end
    end
    
    %% Implanted devices (UCLA alg)
    %%Not implemented yet%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    if options.runTubes
        resultStruct.cxrImpdevicesResultsStruct = cxrImpdevicesAlg(I, resultStruct.cxrLungSegmentResultStruct, fid_log);
        imwrite(resultStruct.cxrImpdevicesResultsStruct.keyImage, fullfile(out_folder, 'tubes_key_image.png'));
    end
    
    add_line_to_log(fid_log,'NOTICE','cxrAlgUnit finished');
catch err
    add_line_to_log(fid_log,'ERROR',err.message,err) % Write to log
end